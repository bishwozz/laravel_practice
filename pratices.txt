1. Can you explain the difference between Eloquent ORM 
    and Query Builder in Laravel, and when you might choose one over the other?

    Yes, Query Builder is indeed faster because it’s closer to raw SQL,
     avoiding the overhead of object creation in Eloquent. But Eloquent’s features,
      like relationships, scopes, and mutators/accessors, offer great advantages
       for complex applications where these abstractions make code more readable and maintainable.

2. Let’s say you need to improve the performance of an Eloquent query that fetches
 thousands of records. What are some strategies you could use in Laravel to handle
  this more efficiently?

-Eager loading 
-indexing database columns that are frequently queried or used in joins can also
 speed up retrieval times.

-Chunking: For large datasets, you can process records in chunks (e.g., chunk(1000))
  to avoid loading too many records in memory at once.

-Caching: Storing frequently accessed results in cache (e.g., Redis or file cache)
   can reduce database load.

-Selecting specific columns: Using select() to retrieve only the necessary columns rather
 than the entire row can improve performance.


3.How would you handle a situation where a certain feature needs to be reusable
   across multiple controllers in Laravel?

3.5 What’s the difference between hasOne, belongsTo, hasMany, and belongsToMany relationships in Eloquent?
   Could you give examples of when you would use each one?
   ==
    hasOne: One-to-one relationship where the foreign key is on the target model.
    Example: A User has one Profile. The Profile table will have the user_id foreign key.
    belongsTo: One-to-one (or one-to-many) relationship where the foreign key is on the source model.

    Example: A Profile belongs to a User. The Profile table will have the user_id foreign key.
    hasMany: One-to-many relationship where the foreign key is on the target model.

    Example: A Post has many Comments. The comments table will have the post_id foreign key.
    belongsToMany: Many-to-many relationship, requiring a pivot table (junction table) to
    store the relationship.

    Example: A User belongs to many Roles, and vice versa. The pivot table role_user will
    have user_id and role_id.

4.How would you implement soft deletes in Laravel

